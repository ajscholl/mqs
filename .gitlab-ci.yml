image: docker:latest
services:
- docker:dind

stages:
- compile
- image
- benchmark
- publish

test:
  image: rust:1.34.0-stretch
  stage: compile
  script:
     - export CARGO_HOME=`pwd`/usr/local/cargo
     - export RUSTUP_HOME=`pwd`/usr/local/rustup
     - export PATH=$CARGO_HOME/bin:$RUSTUP_HOME/bin:$PATH
     - mkdir -p $CARGO_HOME $RUSTUP_HOME
     - rustup default nightly-2019-12-16
     - which cargo
     - cargo test --locked
  cache:
    key: test
    paths:
      - target
      - usr/local

compile:
  image: rust:1.34.0-stretch
  stage: compile
  script:
     - export CARGO_HOME=`pwd`/usr/local/cargo
     - export RUSTUP_HOME=`pwd`/usr/local/rustup
     - export PATH=$CARGO_HOME/bin:$RUSTUP_HOME/bin:$PATH
     - mkdir -p $CARGO_HOME $RUSTUP_HOME
     - rustup default nightly-2019-12-16
     - which cargo
     - cargo build --locked --release
     - mkdir -p bin
     - cp target/release/mqs bin
     - cp target/release/bench bin
     - cp target/release/wait-db bin
     - cp target/release/wait-http bin
     - cargo install diesel_cli
     - cp "$CARGO_HOME/bin/diesel" bin
     - ls -lah bin
  artifacts:
    paths:
    - bin/mqs
    - bin/bench
    - bin/wait-db
    - bin/wait-http
    - bin/diesel
    expire_in: 1 week
  cache:
    key: compile
    paths:
      - target
      - usr/local

.template:image:
  stage: image
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build --tag $IMAGE_NAME --file $DOCKERFILE --build-arg="app=$APPLICATION" .
    - docker push $IMAGE_NAME
  dependencies:
    - compile

mqs:image:
  extends: .template:image
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/mqs:$CI_COMMIT_REF_NAME
    APPLICATION: mqs
    DOCKERFILE: Dockerfile.service

bench:image:
  extends: .template:image
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/bench:$CI_COMMIT_REF_NAME
    APPLICATION: bench
    DOCKERFILE: Dockerfile.app

wait-db:image:
  extends: .template:image
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/wait-db:$CI_COMMIT_REF_NAME
    APPLICATION: wait-db
    DOCKERFILE: Dockerfile.app

wait-http:image:
  extends: .template:image
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/wait-http:$CI_COMMIT_REF_NAME
    APPLICATION: wait-http
    DOCKERFILE: Dockerfile.app

benchmark:
  stage: benchmark
  before_script:
    - apk update
    - apk add docker-compose
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" up --detach postgres
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" up --exit-code-from wait-db wait-db
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" up --detach mqs
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" up --exit-code-from wait-http wait-http
  after_script:
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" down
  script:
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" up --exit-code-from bench bench

publish:
  stage: publish
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker pull "$CI_REGISTRY_IMAGE/mqs:$CI_COMMIT_REF_NAME"
    - docker tag "$CI_REGISTRY_IMAGE/mqs:$CI_COMMIT_REF_NAME" "$DOCKERHUB_USER/mqs:$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE/mqs:$CI_COMMIT_REF_NAME" "$DOCKERHUB_USER/mqs:latest"
    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD"
    - docker push "$DOCKERHUB_USER/mqs:$CI_COMMIT_TAG"
    - docker push "$DOCKERHUB_USER/mqs:latest"
  only:
    - tags
