image: docker:latest
services:
- docker:dind

stages:
- compile
- image
- benchmark
- publish

variables:
  # 1.61.0, but we still need the nightly channel for most of our cargo fmt options
  RUST_VERSION: nightly-2022-02-23

.template:rust:
  image: rust:1.59.0-buster
  before_script:
    - export CARGO_HOME=/usr/local/cargo
    - export RUSTUP_HOME=/usr/local/rustup
    - export PATH="$CARGO_HOME/bin:$RUSTUP_HOME/bin:$PATH"
    - mkdir -p "$(pwd)/usr/local/cargo" "$(pwd)/usr/local/rustup"
    - mv "$(pwd)/usr/local/cargo" /usr/local/cargo
    - mv "$(pwd)/usr/local/rustup" /usr/local/rustup
    - rustup default "$RUST_VERSION"
  after_script:
    - mv /usr/local/cargo "$(pwd)/usr/local/cargo"
    - mv /usr/local/rustup "$(pwd)/usr/local/rustup"
  cache:
    paths:
      - target
      - usr/local

test:
  extends: .template:rust
  stage: compile
  script:
     - rustup component add rustfmt
     - rustup component add clippy
     - cargo test --locked
     - cargo fmt -- --check
     - find . -name "*.rs" -exec touch {} \;
     - cargo check --locked -Z unstable-options
     - find . -name "*.rs" -exec touch {} \;
     - cargo clippy -Z unstable-options -- -D clippy::all -D clippy::pedantic -D clippy::nursery -W clippy::module_name_repetitions -A clippy::missing-errors-doc -A clippy::missing-panics-doc
  cache:
    key: test

audit:
  extends: .template:rust
  stage: compile
  script:
     - cargo install cargo-audit
     - cargo audit
  cache:
    key: audit

coverage:
  extends: .template:rust
  stage: compile
  script:
     - cargo install cargo-tarpaulin --version "=0.18.0"
     - cargo tarpaulin --locked --line --out Html --workspace --verbose
  artifacts:
    paths:
      - tarpaulin-report.html
    expire_in: 1 week
  coverage: '/(\d+\.\d+)% coverage/'
  cache:
    key: coverage

compile:
  extends: .template:rust
  stage: compile
  script:
     - cargo build --locked --release
     - mkdir -p bin
     - cp target/release/mqs bin
     - cp target/release/bench bin
     - cp target/release/wait-db bin
     - cp target/release/wait-http bin
     - cargo install diesel_cli
     - cp "$CARGO_HOME/bin/diesel" bin
     - ls -lah bin
  artifacts:
    paths:
    - bin/mqs
    - bin/bench
    - bin/wait-db
    - bin/wait-http
    - bin/diesel
    expire_in: 1 week
  cache:
    key: compile

.template:image:
  stage: image
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build --tag "$IMAGE_NAME" --file "$DOCKERFILE" --build-arg="app=$APPLICATION" --build-arg="appDir=$APPLICATION_DIR" .
    - docker push "$IMAGE_NAME"
  needs:
    - compile

mqs:image:
  extends: .template:image
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/mqs:$CI_COMMIT_REF_NAME
    APPLICATION: mqs
    APPLICATION_DIR: mqs-server
    DOCKERFILE: Dockerfile.service

bench:image:
  extends: .template:image
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/bench:$CI_COMMIT_REF_NAME
    APPLICATION: bench
    DOCKERFILE: Dockerfile.app

wait-db:image:
  extends: .template:image
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/wait-db:$CI_COMMIT_REF_NAME
    APPLICATION: wait-db
    DOCKERFILE: Dockerfile.app

wait-http:image:
  extends: .template:image
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/wait-http:$CI_COMMIT_REF_NAME
    APPLICATION: wait-http
    DOCKERFILE: Dockerfile.app

benchmark:
  stage: benchmark
  before_script:
    - apk update
    - apk add docker-compose
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" up --detach postgres
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" up --exit-code-from wait-db wait-db
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" up --detach mqs
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" up --exit-code-from wait-http wait-http
  after_script:
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" down
  script:
    - docker-compose --project-name "mqs-benchmark-$CI_JOB_ID" up --exit-code-from bench bench

publish:
  stage: publish
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker pull "$CI_REGISTRY_IMAGE/mqs:$CI_COMMIT_REF_NAME"
    - docker tag "$CI_REGISTRY_IMAGE/mqs:$CI_COMMIT_REF_NAME" "$DOCKERHUB_USER/mqs:$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE/mqs:$CI_COMMIT_REF_NAME" "$DOCKERHUB_USER/mqs:latest"
    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD"
    - docker push "$DOCKERHUB_USER/mqs:$CI_COMMIT_TAG"
    - docker push "$DOCKERHUB_USER/mqs:latest"
  only:
    - tags
