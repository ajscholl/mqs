openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ajscholl/mqs/1.0.0
info:
  description: This describes the API provided by MQS
  version: "1.0.0"
  title: MQS API
  contact:
    email: jonas.scholl@lingumatiker.de
  license:
    name: BSD 3-clause "New" or "Revised" License
    url: 'https://github.com/ajscholl/mqs/blob/master/LICENSE'
tags:
  - name: queues
    description: Managing and listing available queues
  - name: messages
    description: Publishing, consuming and deleting messages
paths:
  /queues/{queueName}:
    get:
      tags:
        - queues
      summary: Fetch information about the configuration as well as status of a queue.
      operationId: describeQueue
      description: |
        Looks up the configuration of a queue as well as how many messages are currently
        stored in the queue, how old the oldest message is and how many messages are
        currently visible.
      parameters:
        - in: path
          name: queueName
          description: Name of the queue to describe
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            The server found the queue and returned some description and status about it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueDescription'
        '404':
          description: |
            A queue with the given name was not found.
            You first have to create a queue with this name.
        '500':
          description: |
            The server failed to fetch information about the queue.
            Trying again has a high chance of still not working.
        '503':
          description: |
            The server failed to acquire required resources to describe the queue.
            Try again with exponential backoff.
    post:
      tags:
        - queues
      summary: Update the configuration of an existing queue.
      operationId: updateQueue
      description: |
        Overwrite the configuration of an existing queue.
        Returns the new configuration.
      parameters:
        - in: path
          name: queueName
          description: Name of the queue to update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            The queue was successfully updated and can now be used.
            Messages will not become visible if you reduce the visibility timeout
            and a message is already hidden, it will not be moved to dead letter
            queues or deleted until you receive the message again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueConfigOutput'
        '400':
          description: |
            One or multiple parameters did not validate.
            Body contains an error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            A queue with the given name does not exist.
            Use PUT to create the queue instead.
        '500':
          description: |
            The server failed to update the queue.
            Trying again has a high chance of still not working.
        '503':
          description: |
            The server failed to acquire required resources to update the queue.
            Try again with exponential backoff.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueueConfig'
        description: New configuration of the queue.
    put:
      tags:
        - queues
      summary: Create a new queue.
      operationId: createQueue
      description: |
        Create the configuration for a new queue.
        Does not overwrite existing queues.
        Returns the new configuration.
      parameters:
        - in: path
          name: queueName
          description: Name of the queue to create
          required: true
          schema:
            type: string
      responses:
        '201':
          description: |
            The queue was successfully created and can now be used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueConfigOutput'
        '400':
          description: |
            One or multiple parameters did not validate.
            Body contains an error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: |
            A queue with the given name does already exist.
            Use POST to update the queue instead.
        '500':
          description: |
            The server failed to create the queue.
            Trying again has a high chance of still not working.
        '503':
          description: |
            The server failed to acquire required resources to create the queue.
            Try again with exponential backoff.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueueConfig'
        description: Configuration of the queue to create.
    delete:
      tags:
        - queues
      summary: Delete an existing queue.
      operationId: deleteQueue
      description: |
        Delete the configuration of a queue and all messages currently stored in it.
        Returns the old configuration.
      parameters:
        - in: path
          name: queueName
          description: Name of the queue to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            The queue was successfully deleted and can no longer be used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueConfigOutput'
        '404':
          description: |
            The specified queue did not exist.
            You might want to treat this as success if you only wanted to assert the non-existence of a queue.
        '500':
          description: |
            The server failed to delete the queue.
            Trying again has a high chance of still not working.
        '503':
          description: |
            The server failed to acquire required resources to delete the queue.
            Try again with exponential backoff.
  /queues:
    get:
      tags:
        - queues
      summary: List queues.
      operationId: listQueue
      description: |
        List existint queues.
        Use the parameters limit and offset to consume the queues in single pages.
      parameters:
        - in: query
          name: offset
          description: Number of queues to skip before returning results.
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: Maximum number of results to return.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: |
            The server procesed your request and returned a response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueList'
        '400':
          description: |
            You did not specify numbers for offset or limit.
        '500':
          description: |
            The server failed to list queues.
            Trying again has a high chance of still not working.
        '503':
          description: |
            The server failed to acquire required resources to list queues.
            Try again with exponential backoff.
  /messages/{queueName}:
    get:
      tags:
        - messages
      summary: Receive message.
      operationId: receiveMessages
      description: |
        Get up to a specified amount of messages.
        Returned messages will not be visible until timeout configured in queue expires.
        If specified, blocks until either messages may be available or a timeout expires.
      parameters:
        - in: path
          name: queueName
          description: Name of the queue to receive messages from
          required: true
          schema:
            type: string
        - in: header
          name: X-MQS-MAX-MESSAGES
          description: Number of messages to return. Defaults to 1.
          required: false
          schema:
            type: integer
        - in: header
          name: X-MQS-MAX-WAIT-TIME
          description: Maximum number of seconds to wait until messages are available. Defaults to 0.
          required: false
          schema:
            type: integer
            format: seconds
      responses:
        '200':
          description: |
            A message was found and is returned in the response.
            The response body consists of whatever was published as a message.
            If multiple messages are returned, the response is encoded as
            "multipart/mixed" and each part of the multipart response contains
            the specified response headers.
          headers:
            X-MQS-MESSAGE-ID:
              schema:
                type: string
                format: uuid
                example: 'a7d46b8e-32fe-4d35-a3af-74f9a39da2dc'
              description: Id of the message returned.
            Content-Type:
              schema:
                type: string
                example: 'application/json'
              description: Content type set during message creation.
            Content-Encoding:
              schema:
                type: string
                example: 'gzip'
              description: Content encoding set during message creation.
        '204':
          description: |
            No message was found, try again after some time or publishing a message.
        '404':
          description: |
            The specified queue did not exist.
        '500':
          description: |
            The server failed to receive a message.
            Trying again has a high chance of still not working.
        '503':
          description: |
            The server failed to acquire required resources to receive a message.
            Try again with exponential backoff.
    post:
      tags:
        - messages
      summary: Publish messages.
      operationId: publishMessages
      description: |
        Write the given messages to the queue.
        Either publishes a single message or, if the content type "multipart/mixed" is used,
        each single multipart part will be considered as a separate message.
        Additional headers can be set, but will be ignored.
      parameters:
        - in: path
          name: queueName
          description: Name of the queue to publish the messages to
          required: true
          schema:
            type: string
        - in: header
          name: Content-Type
          description: Content type of the data published. Will be stored and returned upon receive. Defaults to "application/octet-stream".
          required: false
          schema:
            type: string
        - in: header
          name: Content-Encoding
          description: Content encoding of the data published. Will be stored and returned upon received if it was specified upon publishing.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: |
            The operation suceeded, but no new message was inserted
            because all messages did already exist.
        '201':
          description: |
            The operation suceeded and at least one new message was published.
        '404':
          description: |
            The specified queue did not exist.
        '500':
          description: |
            The server failed to publish the message(s).
            Trying again has a high chance of still not working.
        '503':
          description: |
            The server failed to acquire required resources to publish a message.
            Try again with exponential backoff.
  /messages/{messageId}:
    delete:
      tags:
        - messages
      summary: Delete a message.
      operationId: deleteMessage
      description: |
        Delete a single message (i.e., acknowledge it).
      parameters:
        - in: path
          name: messageId
          description: Identifier of the message to delete
          required: true
          schema:
            type: string
            format: uuid
            example: 'a7d46b8e-32fe-4d35-a3af-74f9a39da2dc'
      responses:
        '204':
          description: |
            The message was deleted and will no longer be returned.
        '400':
          description: |
            The specified message id is not a valid uuid.
        '404':
          description: |
            The specified message does not exist.
            You might want to treat this as success if you only wanted
            to assert the non-existence of a message.
        '500':
          description: |
            The server failed to delete the message.
            Trying again has a high chance of still not working.
        '503':
          description: |
            The server failed to acquire required resources to delete the message.
            Try again with exponential backoff.
components:
  schemas:
    QueueConfig:
      type: object
      required:
        - retention_timeout
        - message_delay
        - message_deduplication
      properties:
        redrive_policy:
          $ref: '#/components/schemas/QueueRedrivePolicy'
        retention_timeout:
          type: integer
          format: seconds
          example: 3600
        message_delay:
          type: integer
          format: seconds
          example: 30
        message_deduplication:
          type: boolean
          example: false
    QueueRedrivePolicy:
      type: object
      required:
        - max_receives
        - dead_letter_queue
      properties:
        max_receives:
          type: integer
          example: 5
        dead_letter_queue:
          type: string
          example: 'exampleQueue'
    QueueConfigOutput:
      allOf:
        - type: object
          required:
           - name
          properties:
            name:
              type: string
              example: 'exampleQueue'
        - $ref: '#/components/schemas/QueueConfig'
    QueueDescription:
      allOf:
        - $ref: '#/components/schemas/QueueConfigOutput'
        - type: object
          required:
            - status
          properties:
            status:
              $ref: '#/components/schemas/QueueStatus'
    QueueStatus:
      type: object
      required:
        - messages
        - visible_messages
        - oldest_message_age
      properties:
        messages:
          type: integer
          example: 10
        visible_messages:
          type: integer
          example: 5
        oldest_message_age:
          type: integer
          format: seconds
          example: 300
    QueueList:
      type: object
      required:
        - total
        - queues
      properties:
        totoal:
          type: number
          example: 3
        queues:
          type: array
          items:
            $ref: '#/components/schemas/QueueConfigOutput'
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: "You failed to provide the foo parameter"
